(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"C:\\Users\\Todd\\bar-dojo\\app\\Recipe\\RecipeAdd.js":[function(require,module,exports){
var hashHistory = ReactRouter.hashHistory;

module.exports = React.createClass({displayName: "exports",
  getInitialState: function () {
    return {};
  },
  handlePost: function (e) {
    e.preventDefault();
    var state = this.state;
    var recipe = {
      name: this.state.name.trim(),
    };
    if (!recipe.name) {
      return;
    }
    this.setState({ name: '' });
    $.ajax({
      url: '/api/Recipe',
      dataType: 'json',
      type: 'POST',
      data: recipe,
      success: function (data) {
        // already updated state, we're good to go
        hashHistory.push('/');
      }.bind(this),
      error: function (xhr, status, err) {
        this.setState(state);
        console.error(this.props.url, status, err.toString());
      }.bind(this),
    });
  },
  handleInputChange: function (e) {
    var object = this.state.object;
    object[e.target.name] = e.target.value;
    this.setState({ object: object });
  },
  render: function () {
    return (
      React.createElement("form", {onSubmit: this.handlePost}, 
        React.createElement("input", {
          type: "text", 
          name: "name", 
          placeholder: "Drink name", 
          value: this.state.object.name, 
          onChange: this.handleInputChange}
        ), 
        React.createElement("input", {type: "submit", value: "Add"})
      )
    );
  }
});

},{}],"C:\\Users\\Todd\\bar-dojo\\app\\Recipe\\RecipeEdit.js":[function(require,module,exports){
var hashHistory = ReactRouter.hashHistory;

module.exports = React.createClass({displayName: "exports",
  getInitialState: function () {
    return {
      object: {},
    };
  },
  componentDidMount: function () {
    $.ajax({
      url: '/api/Recipe/' + this.props.params.id,
      type: 'GET',
      success: function (data) {
        this.setState({ object: data });
      }.bind(this),
      error: function (xhr, status, err) {
        console.error(this.props.url, status, err.toString());
      }.bind(this),
    });
  },
  handlePut: function (e) {
    e.preventDefault();
    var object = this.state.object;
    var recipe = {
      id: this.props.params.id,
      name: object.name.trim(),
    };
    if (!recipe.name) {
      return;
    }
    this.setState({ object: {} });
    $.ajax({
      url: '/api/Recipe/' + recipe.id,
      dataType: 'json',
      type: 'PUT',
      data: recipe,
      success: function (data) {
        // already updated state, we're good to go
        hashHistory.push('/');
      }.bind(this),
      error: function (xhr, status, err) {
        this.setState({ object: object });
        console.error(this.props.url, status, err.toString());
      }.bind(this),
    });
  },
  handleInputChange: function (e) {
    var object = this.state.object;
    object[e.target.name] = e.target.value;
    this.setState({ object: object });
  },
  render: function () {
    return (
      React.createElement("form", {onSubmit: this.handlePut}, 
        React.createElement("input", {
          type: "text", 
          name: "name", 
          placeholder: "Drink name", 
          value: this.state.object.name, 
          onChange: this.handleInputChange}
        ), 
        React.createElement("input", {type: "submit", value: "Edit"})
      )
    );
  }
});

},{}],"C:\\Users\\Todd\\bar-dojo\\app\\Recipe\\RecipeLayout.js":[function(require,module,exports){
var ReactRouter = window.ReactRouter;
var Route = ReactRouter.Route;
var Link = ReactRouter.Link;

/*
Recipe.schema = {
  name: Joi.string().required(),
  tags: Joi.array().items(Joi.string()), // tag name
  instructions: Joi.array().items(Joi.string()), // optional
  ingredients: Joi.array().items(Joi.object().keys({
    stockTypeId: Joi.string(),
    quantity: Joi.number(),
  })),

  created: Joi.date().timestamp(),
  archived: Joi.boolean().default(false),
};
*/







module.exports = React.createClass({displayName: "exports",
  render: function () {
// TODO have Drinks menu have submenu for drink types
// TODO set up a router between category display and different drink menus (perhaps setting the selected category as a query val?)
// also a route for the add form
    // return (
    //   <Route component={RecipeLayout}>
    //     <Route path="/" component={RecipeList} />
    //     <Route path="/add" component={RecipeAdd} />
    //   </Route>
    // );
    return (
      React.createElement("div", null, 
        React.createElement("h1", null, "Recipes"), 
        React.createElement(Link, {to: "/"}, "List"), 
        React.createElement(Link, {to: "/add"}, "Add"), 
        this.props.children
      )
    );
  }
});

// <CommentForm onPost={this.handlePost} />

// <div>
//         <h1>Recipes</h1>
//         <RecipeList data={this.state.data} />
//       </div>

},{}],"C:\\Users\\Todd\\bar-dojo\\app\\Recipe\\RecipeList.js":[function(require,module,exports){
var hashHistory = ReactRouter.hashHistory;

var Recipe = React.createClass({displayName: "Recipe",
  handleDelete: function () {
    this.props.onDelete(this.props.recipe.id);
  },
  handleEdit: function () {
    hashHistory.push('/edit/' + this.props.recipe.id);
  },
  render: function () {
    return (
      React.createElement("li", {className: "recipe"}, 
        React.createElement("h2", null, 
          this.props.recipe.name
        ), 
        React.createElement("button", {className: "edit", onClick: this.handleEdit}, "EDIT"), 
        React.createElement("button", {className: "delete", onClick: this.handleDelete}, "X"), 
        this.props.children
      )
    );
  },
});

module.exports = React.createClass({displayName: "exports",
  getInitialState: function () {
    return {
      data: [],
    };
  },
  componentDidMount: function () {
    $.ajax({
      url: '/api/Recipe',
      type: 'GET',
      success: function (data) {
        this.setState({data: data});
      }.bind(this),
      error: function (xhr, status, err) {
        console.error(this.props.url, status, err.toString());
      }.bind(this),
    });
  },
  onDelete: function (id) {
    var data = this.state.data;
    var newData = data.filter((recipe) => { return recipe.id !== id; });
    this.setState({ data: newData });
    $.ajax({
      url: '/api/Recipe/' + id,
      type: 'DELETE',
      error: function (xhr, status, err) {
        console.error(this.props.url, status, err.toString());
        this.setState({data: data});
      }.bind(this),
    });
  },
  render: function () {
    var recipes = this.state.data.map((recipe) => {
      return React.createElement(Recipe, {key: recipe.id, recipe: recipe, onDelete: this.onDelete});
    });
    return (
      React.createElement("ul", null, 
        recipes
      )
    );
  },
});

},{}],"C:\\Users\\Todd\\bar-dojo\\app\\app.js":[function(require,module,exports){
var ReactRouter = window.ReactRouter;
var Router = ReactRouter.Router;
var IndexRoute = ReactRouter.IndexRoute;
var Route = ReactRouter.Route;
var Link = ReactRouter.Link;
var hashHistory = ReactRouter.hashHistory;

var RecipeLayout = require('./Recipe/RecipeLayout');
var RecipeList = require('./Recipe/RecipeList');
var RecipeAdd = require('./Recipe/RecipeAdd');
var RecipeEdit = require('./Recipe/RecipeEdit');

injectTapEventPlugin();


var PatronLayout = React.createClass({displayName: "PatronLayout",
  render: function () {
    return (
      React.createElement("div", null, "TODO")
    );
  }
});


var AppLayout = React.createClass({displayName: "AppLayout",
  render: function () {
    return (
      React.createElement("div", {id: "page"}, 
        React.createElement("ul", {className: "navbar"}, 
          React.createElement("li", null, React.createElement(Link, {to: "/"}, "Drinks")), 
          React.createElement("li", null, React.createElement(Link, {to: "/patrons"}, "Patrons")), 
          React.createElement("li", null, React.createElement(Link, {to: "/inventory"}, "Inventory")), 
          React.createElement("li", null, React.createElement(Link, {to: "/shopping"}, "Shopping List")), 
          React.createElement("li", null, React.createElement(Link, {to: "/history"}, "History"))
        ), 
        React.createElement("div", {id: "content"}, 
          this.props.children
        )
      )
    );
  }
});


ReactDOM.render(
  React.createElement(Router, {history: hashHistory}, 
    React.createElement(Route, {component: AppLayout}, 
      React.createElement(Route, {path: "/", component: RecipeLayout}, 
        React.createElement(IndexRoute, {component: RecipeList}), 
        React.createElement(Route, {path: "/add", component: RecipeAdd}), 
        React.createElement(Route, {path: "/edit/:id", component: RecipeEdit})
      ), 
      React.createElement(Route, {path: "/patrons", component: PatronLayout})
    )
  ),
  document.getElementById('app')
);

/*
      <Route component={SearchLayout}>
        <Route path="users" component={UserList} />
        <Route path="widgets" component={WidgetList} />
      </Route>
*/

},{"./Recipe/RecipeAdd":"C:\\Users\\Todd\\bar-dojo\\app\\Recipe\\RecipeAdd.js","./Recipe/RecipeEdit":"C:\\Users\\Todd\\bar-dojo\\app\\Recipe\\RecipeEdit.js","./Recipe/RecipeLayout":"C:\\Users\\Todd\\bar-dojo\\app\\Recipe\\RecipeLayout.js","./Recipe/RecipeList":"C:\\Users\\Todd\\bar-dojo\\app\\Recipe\\RecipeList.js"}]},{},["C:\\Users\\Todd\\bar-dojo\\app\\app.js"])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
