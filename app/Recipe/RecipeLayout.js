var Recipe = React.createClass({
  render: function () {
    return (
      <div className="recipe">
        <h2>
          {this.props.recipe.name}
        </h2>
        {this.props.children}
      </div>
    );
  }
});

var RecipeList = React.createClass({
  render: function () {
    var recipes = this.props.data.map(function (recipe) {
      return <Recipe key={recipe.name} recipe={recipe}></Recipe>;
    });
    return (
      <ul>
        {recipes}
      </ul>
    );
  }
});


module.exports = React.createClass({
  loadCommentsFromServer: function () {
    $.ajax({
      url: '/api/Recipe',
      dataType: 'json',
      cache: false,
      success: function (data) {
        this.setState({data: data});
      }.bind(this),
      error: function (xhr, status, err) {
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },
  handleCommentSubmit: function (comment) {
    var comments = this.state.data;
    // Optimistically set an id on the new comment. It will be replaced by an
    // id generated by the server. In a production application you would likely
    // not use Date.now() for this and would have a more robust system in place.
    // comment.id = Date.now();
    var newComments = comments.concat([comment]);
    this.setState({data: newComments});
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      type: 'POST',
      data: comment,
      success: function (data) {
        this.setState({data: data});
      }.bind(this),
      error: function (xhr, status, err) {
        this.setState({data: comments});
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },
  getInitialState: function () {
    return {
      page: 'Drinks',
      data: [],
    };
  },
  componentDidMount: function () {
    this.loadCommentsFromServer();
  },
  render: function () {
// TODO have Drinks menu have submenu for drink types
    return (
      <div>
        <h1>Recipes</h1>
        <RecipeList data={this.state.data} />
      </div>
    );
  }
});

// <CommentForm onCommentSubmit={this.handleCommentSubmit} />