(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"C:\\Users\\Todd\\bar-dojo\\app\\Recipe\\RecipeLayout.js":[function(require,module,exports){
var Recipe = React.createClass({displayName: "Recipe",
  render: function () {
    return (
      React.createElement("div", {className: "recipe"}, 
        React.createElement("h2", null, 
          this.props.recipe.name
        ), 
        this.props.children
      )
    );
  }
});

var RecipeList = React.createClass({displayName: "RecipeList",
  render: function () {
    var recipes = this.props.data.map(function (recipe) {
      return React.createElement(Recipe, {key: recipe.name, recipe: recipe});
    });
    return (
      React.createElement("ul", null, 
        recipes
      )
    );
  }
});


module.exports = React.createClass({displayName: "exports",
  loadCommentsFromServer: function () {
    $.ajax({
      url: '/api/Recipe',
      dataType: 'json',
      cache: false,
      success: function (data) {
        this.setState({data: data});
      }.bind(this),
      error: function (xhr, status, err) {
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },
  handleCommentSubmit: function (comment) {
    var comments = this.state.data;
    // Optimistically set an id on the new comment. It will be replaced by an
    // id generated by the server. In a production application you would likely
    // not use Date.now() for this and would have a more robust system in place.
    // comment.id = Date.now();
    var newComments = comments.concat([comment]);
    this.setState({data: newComments});
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      type: 'POST',
      data: comment,
      success: function (data) {
        this.setState({data: data});
      }.bind(this),
      error: function (xhr, status, err) {
        this.setState({data: comments});
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },
  getInitialState: function () {
    return {
      page: 'Drinks',
      data: [],
    };
  },
  componentDidMount: function () {
    this.loadCommentsFromServer();
  },
  render: function () {
// TODO have Drinks menu have submenu for drink types
    return (
      React.createElement("div", null, 
        React.createElement("h1", null, "Recipes"), 
        React.createElement(RecipeList, {data: this.state.data})
      )
    );
  }
});

// <CommentForm onCommentSubmit={this.handleCommentSubmit} />

},{}],"C:\\Users\\Todd\\bar-dojo\\app\\app.js":[function(require,module,exports){
// var Router = ReactRouter;
// var Route = Router.Route, DefaultRoute = Router.DefaultRoute,
//   Link=Router.Link, RouteHandler = Router.RouteHandler, browserHistory = Router.browserHistory;

var ReactRouter = window.ReactRouter;
var Router = ReactRouter.Router;
var Route = ReactRouter.Route;
var Link = ReactRouter.Link;
var hashHistory = ReactRouter.hashHistory;

var RecipeLayout = require('./Recipe/RecipeLayout');


// var CommentForm = React.createClass({
//   getInitialState: function () {
//     return {author: '', text: ''};
//   },
//   handleAuthorChange: function (e) {
//     this.setState({author: e.target.value});
//   },
//   handleTextChange: function (e) {
//     this.setState({text: e.target.value});
//   },
//   handleSubmit: function (e) {
//     e.preventDefault();
//     var author = this.state.author.trim();
//     var text = this.state.text.trim();
//     if (!text || !author) {
//       return;
//     }
//     this.props.onCommentSubmit({name: author, unitType: text});
//     this.setState({author: '', text: ''});
//   },
//   render: function () {
//     return (
//       <form className="commentForm" onSubmit={this.handleSubmit}>
//         <input
//           type="text"
//           placeholder="Your name"
//           value={this.state.author}
//           onChange={this.handleAuthorChange}
//         />
//         <input
//           type="text"
//           placeholder="Say something..."
//           value={this.state.text}
//           onChange={this.handleTextChange}
//         />
//         <input type="submit" value="Post" />
//       </form>
//     );
//   }
// });



var PatronLayout = React.createClass({displayName: "PatronLayout",
  render: function () {
    return (
      React.createElement("div", null, "TODO")
    );
  }
});


var AppLayout = React.createClass({displayName: "AppLayout",
  render: function () {
    return (
      React.createElement("div", {id: "page"}, 
        React.createElement("ul", {className: "navbar"}, 
          React.createElement("li", null, React.createElement(Link, {to: "/"}, "Drinks")), 
          React.createElement("li", null, React.createElement(Link, {to: "/patrons"}, "Patrons")), 
          React.createElement("li", null, React.createElement(Link, {to: "/inventory"}, "Inventory")), 
          React.createElement("li", null, "Shopping List"), 
          React.createElement("li", null, "History")
        ), 
        React.createElement("div", {id: "content"}, 
          this.props.children
        )
      )
    );
  }
});


ReactDOM.render(
  // <App url="/api/Recipe" />,
  React.createElement(Router, {history: hashHistory}, 
    React.createElement(Route, {component: AppLayout}, 
      React.createElement(Route, {path: "/", component: RecipeLayout}), 
      React.createElement(Route, {path: "/patrons", component: PatronLayout})
    )
  ),
  document.getElementById('app')
);

/*
      <Route component={SearchLayout}>
        <Route path="users" component={UserList} />
        <Route path="widgets" component={WidgetList} />
      </Route>
*/

/* ===== NETWORK HELPERS ===== */

function deleteOne (modelName, id, callback) {}

function getOne (modelName, id, callback) {}

function patchOne (modelName, id, delta, callback) {}

function postOne (modelName, object, callback) {}

function putOne (modelName, object, callback) {}



/*
Recipe.schema = {
  name: Joi.string().required(),
  tags: Joi.array().items(Joi.string()), // tag name
  instructions: Joi.array().items(Joi.string()), // optional
  ingredients: Joi.array().items(Joi.object().keys({
    stockTypeId: Joi.string(),
    quantity: Joi.number(),
  })),

  created: Joi.date().timestamp(),
  archived: Joi.boolean().default(false),
};
*/

},{"./Recipe/RecipeLayout":"C:\\Users\\Todd\\bar-dojo\\app\\Recipe\\RecipeLayout.js"}]},{},["C:\\Users\\Todd\\bar-dojo\\app\\app.js"])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
